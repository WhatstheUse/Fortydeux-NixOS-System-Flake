name: "Build Surface Kernels"

on:
  # Manual trigger for when you discover a kernel update
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if cache exists'
        required: false
        default: false
        type: boolean
  
  # Automatic trigger on kernel-related changes only
  push:
    branches:
      - main
    paths:
      - 'nixos-config/system-modules/ms-surface.nix'
      - 'nixos-config/system-modules/ms-surface-cachix.nix'

jobs:
  build-surface-kernel:
    runs-on: ubuntu-latest-4-cores
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Nix
        uses: DeterminateSystems/determinate-nix-action@v3

      - name: Validate Cachix configuration
        run: |
          if [ -z "${{ secrets.CACHIX_AUTH_TOKEN }}" ]; then
            echo "‚ùå CACHIX_AUTH_TOKEN secret is not configured!"
            echo ""
            echo "üìã To fix this:"
            echo "1. Go to your GitHub repository settings"
            echo "2. Navigate to Secrets and variables ‚Üí Actions"
            echo "3. Add a new repository secret named 'CACHIX_AUTH_TOKEN'"
            echo "4. Get the token from https://cachix.org ‚Üí fortydeux-surface ‚Üí Settings ‚Üí Auth Tokens"
            echo ""
            echo "üîó Repository: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          else
            echo "‚úÖ CACHIX_AUTH_TOKEN is configured"
          fi

      - name: Setup Cachix
        uses: cachix/cachix-action@v15
        with:
          name: fortydeux-surface
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        env:
          CACHIX_AUTH_TOKEN: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: Get kernel info
        id: kernel-info
        run: |
          KERNEL_DRV=$(nix eval --accept-flake-config --raw .#nixosConfigurations.archerfish-nixos.config.boot.kernelPackages.kernel.drvPath)
          KERNEL_HASH=$(basename $KERNEL_DRV .drv)
          echo "drv-path=$KERNEL_DRV" >> $GITHUB_OUTPUT
          echo "hash=$KERNEL_HASH" >> $GITHUB_OUTPUT
          echo "Kernel derivation: $KERNEL_DRV"
          echo "Hash: $KERNEL_HASH"

      - name: Check if kernel already in Cachix
        id: cachix-check
        run: |
          echo "Checking if kernel is already available in Cachix cache..."
          
          # Get the kernel derivation path
          KERNEL_DRV="${{ steps.kernel-info.outputs.drv-path }}"
          KERNEL_HASH="${{ steps.kernel-info.outputs.hash }}"
          
          echo "Kernel hash: $KERNEL_HASH"
          
          # Try to fetch the kernel from Cachix using the specific derivation
          if nix build --accept-flake-config --substituters "https://fortydeux-surface.cachix.org" --trusted-public-keys "fortydeux-surface.cachix.org-1:FFouI4YY62YGdnQbABdRu+jGfhMDnO+zNWGocIFd3rs=" "$KERNEL_DRV" --dry-run 2>/dev/null; then
            echo "cached=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Kernel (hash: $KERNEL_HASH) already available in Cachix cache"
          else
            echo "cached=false" >> $GITHUB_OUTPUT
            echo "‚ùå Kernel (hash: $KERNEL_HASH) not found in Cachix cache, needs to be built"
          fi

      - name: Skip build - kernel already cached
        if: steps.cachix-check.outputs.cached == 'true' && github.event.inputs.force_rebuild != 'true'
        run: |
          echo "üéâ Kernel is already available in Cachix cache!"
          echo "‚úÖ No build needed - your devices can use the cached kernel"
          echo "üîÑ To force a rebuild, use the manual trigger with 'force_rebuild' enabled"
          echo ""
          echo "üìä Workflow Summary:"
          echo "  - Trigger: ${{ github.event_name }}"
          echo "  - Kernel Hash: ${{ steps.kernel-info.outputs.hash }}"
          echo "  - Status: Already cached ‚úÖ"
          echo "  - Action: Skipped build (no changes needed)"
          
      - name: Build Surface Kernel
        if: steps.cachix-check.outputs.cached != 'true' || github.event.inputs.force_rebuild == 'true'
        run: |
          echo "Building Surface kernel (this may take up to 3 hours)..."
          echo "This builds the patched Linux kernel with Surface hardware support"
          
          # Build the kernel
          nix build --accept-flake-config --print-build-logs .#nixosConfigurations.archerfish-nixos.config.boot.kernelPackages.kernel
          
          # Get the actual output path
          KERNEL_OUT=$(nix eval --accept-flake-config --raw .#nixosConfigurations.archerfish-nixos.config.boot.kernelPackages.kernel.outPath)
          echo "Built kernel available at: $KERNEL_OUT"
          
          # Push to Cachix
          nix path-info -r .#nixosConfigurations.archerfish-nixos.config.boot.kernelPackages.kernel | cachix push fortydeux-surface
          echo "Kernel pushed to Cachix cache: fortydeux-surface"

      - name: Verify kernel availability
        if: steps.cachix-check.outputs.cached != 'true' || github.event.inputs.force_rebuild == 'true'
        run: |
          KERNEL_OUT=$(nix eval --accept-flake-config --raw .#nixosConfigurations.archerfish-nixos.config.boot.kernelPackages.kernel.outPath)
          if nix path-info $KERNEL_OUT; then
            echo "‚úÖ Surface kernel successfully built and available"
            echo "üì¶ Kernel path: $KERNEL_OUT"
            echo "üîÑ Cache: Available via Cachix cache 'fortydeux-surface'"
          else
            echo "‚ùå Kernel build verification failed"
            exit 1
          fi

      - name: Usage instructions
        run: |
          echo ""
          if [ "${{ steps.cachix-check.outputs.cached }}" == "true" ] && [ "${{ github.event.inputs.force_rebuild }}" != "true" ]; then
            echo "üéâ Surface kernel workflow completed - kernel already cached!"
            echo ""
            echo "‚úÖ The kernel is already available in your Cachix cache"
            echo "üîÑ Your devices can use the cached kernel without building locally"
            echo ""
            echo "üìã To use the cached kernel:"
            echo "1. Run 'sudo nixos-rebuild switch --flake .#archerfish-nixos' on archerfish"
            echo "2. Run 'sudo nixos-rebuild switch --flake .#killifish-nixos' on killifish"
            echo "3. Both machines will pull the pre-built kernel from Cachix cache"
          else
            echo "üéâ Surface kernel build completed!"
            echo ""
            echo "üìã Next steps:"
            echo "1. The kernel has been pushed to your Cachix cache"
            echo "2. Run 'sudo nixos-rebuild switch --flake .#archerfish-nixos' on archerfish"
            echo "3. Run 'sudo nixos-rebuild switch --flake .#killifish-nixos' on killifish" 
            echo "4. Both machines will pull the pre-built kernel from Cachix cache"
            echo ""
            echo "‚è∞ The kernel will be cached and available for future rebuilds"
            echo "üîÑ Only rebuild when you see a new kernel compilation starting locally"
          fi
